{"name":"Store","tagline":"A better way to use localStorage and sessionStorage","body":"A feature-filled and friendly way to take advantage of localStorage and sessionStorage\r\n(JSON, namespacing, extensions, etc).\r\n\r\nDownload: [store2.min.js][prod]  or  [store2.js][dev]  \r\n[NPM][npm]: `npm install store2`  \r\nBower: `bower install store2`   \r\n[NuGet][]: `Install-Package store2`  \r\n\r\n[NuGet]: http://nuget.org/packages/store2/\r\n[prod]: https://raw.github.com/nbubna/store/master/dist/store2.min.js\r\n[dev]: https://raw.github.com/nbubna/store/master/dist/store2.js\r\n[npm]: https://npmjs.org/package/store2\r\n\r\n\r\n## Documentation\r\nThe main store function can handle ```set```, ```get```, ```setAll```, ```getAll``` and ```clear```\r\nactions directly. Respectively, these are called like so:\r\n\r\n```javascript\r\nstore(key, data);                 // sets stringified data under key\r\nstore(key);                       // gets and parses data stored under key\r\nstore({key: data, key2: data2});  // sets all key/data pairs in the object\r\nstore();                          // gets all stored key/data pairs as an object\r\nstore(false);                     // clears all items from storage\r\n```\r\n\r\nThere are also more explicit and versatile functions available:\r\n\r\n```javascript\r\nstore.set(key, data[, overwrite]); // === store(key, data);\r\nstore.setAll(data[, overwrite]);   // === store({key: data, key2: data});\r\nstore.get(key[, alt]);             // === store(key);\r\nstore.getAll();                    // === store();\r\nstore.clear();                     // === store(false);\r\nstore.has(key);                    // returns true or false\r\nstore.remove(key);                 // removes key and its data\r\nstore.each(callback);              // called with key and data args, return false to exit early\r\nstore.keys();                      // returns array of keys\r\nstore.size();                      // number of keys, not length of data\r\nstore.clearAll();                  // clears *ALL* areas (but still namespace sensitive)\r\n```\r\n\r\nPassing in ```false``` for the optional overwrite parameters will cause ```set``` actions to be skipped \r\nif the storage already has a value for that key. All ```set``` action methods return the previous value \r\nfor that key, by default. If overwrite is ```false``` and there is a previous value, the unused new \r\nvalue will be returned.\r\n\r\nAll of these use the browser's localStorage (aka \"local\"). Using sessionStorage merely requires \r\ncalling the same functions on ```store.session```:\r\n\r\n```javascript\r\nstore.session(\"addMeTo\", \"sessionStorage\");\r\nstore.local({lots: 'of', data: 'altogether'});// store.local === store :)\r\n```\r\nAll the specific ```get```, ```set```, etc. functions are available on both ```store.session``` and ```store.local```, as well as any other storage facility registered via ```store.area(name, customStorageObject)``` by an extension, where customStorageObject must implement the [Storage interface][storage]. This is how [store.old.js][old] extends store.js to support older versions of IE and Firefox.\r\n\r\n[storage]: http://dev.w3.org/html5/webstorage/#the-storage-interface\r\n\r\nIf you want to put stored data from different pages or areas of your site into separate namespaces, \r\nthe ```store.namespace(ns)``` function is your friend:\r\n\r\n```javascript\r\nvar cart = store.namespace('cart');\r\ncart('total', 23.25);// stores in localStorage as 'cart.total'\r\nconsole.log(store('cart.total') == cart('total'));// logs true\r\nconsole.log(store.cart.getAll());// logs {total: 23.25}\r\ncart.session('group', 'toys');// stores in sessionStorage as 'cart.group'\r\n```\r\n\r\nThe namespace provides the same exact API as ```store``` but silently adds/removes the namespace prefix as needed.\r\nIt also makes the namespaced API accessible directly via ```store[namespace]``` (e.g. ```store.cart```) as long as it\r\ndoes not conflict with an existing part of the store API.\r\n\r\nThe 'namespace' function is one of two \"extra\" functions that are also part of the \"store API\":\r\n\r\n```javascript\r\nstore.namespace(prefix[, noSession]);// returns a new store API that prefixes all key-based functions\r\nstore.isFake();// is this storage persistent? (e.g. is this old IE?) \r\n```\r\n\r\nIf localStorage or sessionStorage are unavailable, they will be faked to prevent errors,\r\nbut data stored will NOT persist beyond the life of the current document/page. Use the \r\n[store.old.js][old] extension to add persistent backing for the store API in older browsers.\r\n\r\n## Extensions\r\nThese mostly could use further documentation and abuse...er...testing.\r\nContributions are welcome!\r\n\r\n#### Beta - Stable and definitely useful\r\n* [store.old.js][old] - Add working localStorage and sessionStorage polyfills for older browsers\r\n* [store.overflow.js][overflow] - Fall back to fake storage on quota errors (e.g. very useful for [Safari private mode][safari])\r\n* [store.cache.js][cache] - To make data expire, pass a number of minutes as the overwrite param on ```set()``` calls\r\n* [store.on.js][on] - Superior storage event handling (per key, per namespace, etc in IE9+)\r\n\r\n#### Alpha - Either incomplete or unstable or both\r\n* [store.quota.js][quota] - Register callbacks to handle (and even cancel) quota errors\r\n* [store.measure.js][measure] - Experimental extension for measuring space used and available (needs work)\r\n\r\n\r\n[old]: https://raw.github.com/nbubna/store/master/src/store.old.js\r\n[overflow]: https://raw.github.com/nbubna/store/master/src/store.overflow.js\r\n[cache]: https://raw.github.com/nbubna/store/master/src/store.cache.js\r\n[on]: https://raw.github.com/nbubna/store/master/src/store.on.js\r\n[quota]: https://raw.github.com/nbubna/store/master/src/store.quota.js\r\n[measure]: https://raw.github.com/nbubna/store/master/src/store.measure.js\r\n[safari]: https://github.com/marcuswestin/store.js/issues/66\r\n\r\n## Release History\r\n* 2010-02-10 v0.1 (extraction from esha.js)\r\n* 2010-05-25 v1.0 (internal release)\r\n* 2013-04-09 [v2.0.3][] (public) - First GitHub release\r\n* 2013-04-20 [v2.1.0][] (public) - Drops flawed/confusing/unused key(i) method, fixes extension problems.\r\n* 2013-04-30 [v2.1.1][] (public) - Browserify (and friends) support (module.exports = store)\r\n* 2013-05-30 [v2.1.2][] (public) - Component support (old component.json is now bower.json)\r\n\r\n[v2.0.3]: https://github.com/nbubna/store/tree/2.0.3\r\n[v2.1.0]: https://github.com/nbubna/store/tree/2.1.0\r\n[v2.1.1]: https://github.com/nbubna/store/tree/2.1.1\r\n[v2.1.2]: https://github.com/nbubna/store/tree/2.1.2\r\n\r\n## Store vs Store\r\nWhen i went to publish this on NPM i discovered another [store.js][other] by Marcus Westin.\r\nTo my surprise, even our APIs had notable overlap. His has fewer features and includes superior support\r\nfor IE 6/7 in the main lib. I contacted him with the idea of merging the featuresets, but we agreed it wouldn't work.\r\nHe sees his library as a temporary polyfill meant to fade away with IE 6/7. This project is meant \r\nto always be useful, as a better way to use localStorage, with polyfilling as an extension.  I do hope\r\nto incorporate IE 6/7 improvements from the other store.js into store.old.js at some point,\r\nbut it is not a priority.\r\n\r\nTo minimize confusion, i will be publishing the library as 'store2',\r\nbut the main function will always be `store`.\r\nMy apologies for the confusion caused while i was publishing this as another 'store'.\r\n\r\n[other]: https://github.com/marcuswestin/store.js/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}